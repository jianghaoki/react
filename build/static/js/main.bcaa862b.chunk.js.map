{"version":3,"sources":["components/Input.js","components/List.js","components/TodoList.js","index.js"],"names":["Input","this","input","focus","htmlFor","id","type","ref","onChange","props","handleChange","value","inpValue","onClick","handleClick","Component","List","a1","todos","filter","item","done","a2","length","renderTodos","TodoList","e","setState","target","state","title","delete","idx","index","toggle","newTodos","JSON","parse","stringify","map","todo","checked","dangerouslySetInnerHTML","__html","localStorage","getItem","setItem","ReactDOM","render","document","getElementById"],"mappings":"6KAEqBA,E,kLAEbC,KAAKC,MAAMC,U,+BAGL,IAAD,OACL,OACI,6BACI,2BAAOC,QAAQ,SAAf,YAIA,2BAAOC,GAAG,QAAQC,KAAK,OACnBC,IAAK,SAAAL,GAAK,OAAE,EAAKA,MAAMA,GACvBM,SAAUP,KAAKQ,MAAMC,aACrBC,MAAOV,KAAKQ,MAAMG,WAGtB,4BAAQC,QAASZ,KAAKQ,MAAMK,aAA5B,qB,GAlBmBC,aCEdC,E,uKAGjB,IAAIC,EAAGhB,KAAKQ,MAAMS,MAAMC,QAAO,SAACC,GAC9B,OAAOA,EAAKC,QAGVC,EAAGrB,KAAKQ,MAAMS,MAAMC,QAAO,SAACC,GAC9B,OAAQA,EAAKC,QAGf,OACE,6BACE,uDAASC,EAAGC,QACZ,4BAEItB,KAAKQ,MAAMe,aAAY,IAG3B,uDAASP,EAAGM,QACZ,4BAEItB,KAAKQ,MAAMe,aAAY,S,GAtBDT,aCCbU,E,kDAGhB,aAAc,IAAD,8BACT,gBA0BLf,aAAa,SAACgB,GACV,EAAKC,SAAS,CAACf,SAASc,EAAEE,OAAOjB,SA5BvB,EAgCdG,YAAc,WACe,IAAtB,EAAKe,MAAMjB,WAGd,EAAKe,SAAS,CAACT,MAAM,CAAC,CAACY,MAAM,EAAKD,MAAMjB,SAASS,MAAK,IAAlC,mBAA4C,EAAKQ,MAAMX,UAC3E,EAAKS,SAAS,CAACf,SAAS,OArCd,EA0CbmB,OAAS,SAACC,GACN,EAAKL,SAAS,CACVT,MAAM,EAAKW,MAAMX,MAAMC,QAAO,SAACC,EAAKa,GAAN,OAAcA,GAAOD,QA5C9C,EAgDbE,OAAS,SAACD,GACP,IAAIE,EAAWC,KAAKC,MAAMD,KAAKE,UAAU,EAAKT,MAAMX,QACpDiB,EAASF,GAAOZ,MAAQc,EAASF,GAAOZ,KACxC,EAAKM,SAAS,CACVT,MAAMiB,KApDA,EAyDbX,YAAc,SAACH,GACX,OAAO,EAAKQ,MAAMX,MAAMqB,KAAI,SAACC,EAAKR,GAC/B,GAAGQ,EAAKnB,MAAMA,EACV,OAAM,4BACF,2BAAOf,KAAK,WACZmC,QAASpB,EACTR,QAAS,kBAAI,EAAKqB,OAAOF,MAGzB,0BAAMU,wBAAyB,CAACC,OAAOH,EAAKV,SAI5C,4BAAQjB,QAAS,kBAAI,EAAKkB,OAAOC,KAAjC,qBApEX,EAAKH,MAAM,CACPjB,SAAS,GACTM,MAAM,CACH,CAACY,MAAM,IAAIT,MAAK,GAChB,CAACS,MAAM,IAAIT,MAAK,KANd,E,gEAYV,IAAIH,EAAQ0B,aAAaC,QAAQ,SAC9B3B,GACCjB,KAAK0B,SAAS,CACVT,MAAOkB,KAAKC,MAAMnB,O,2CAM1B0B,aAAaE,QACT,QACAV,KAAKE,UAAUrC,KAAK4B,MAAMX,U,+BAwDzB,MAEkBjB,KAAK4B,MAArBX,EAFF,EAEEA,MAAMN,EAFR,EAEQA,SAEb,OACI,6BACI,kBAAC,EAAD,CAAOA,SAAUA,EACjBE,YAAab,KAAKa,YAClBJ,aAAcT,KAAKS,eAGnB,kBAAC,EAAD,CAAMQ,MAAOA,EACbM,YAAavB,KAAKuB,mB,GA7FzBT,aC0RPgC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.bcaa862b.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\n\r\nexport default class Input extends Component {\r\n    componentDidMount(){\r\n        this.input.focus();\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <label htmlFor=\"input\">\r\n                    todoList\r\n                </label>\r\n\r\n                <input id=\"input\" type=\"text\" \r\n                    ref={input=>this.input=input} \r\n                    onChange={this.props.handleChange}\r\n                    value={this.props.inpValue}>\r\n                </input>\r\n\r\n                <button onClick={this.props.handleClick}>\r\n                    添加\r\n                </button>\r\n            </div>         \r\n        )\r\n    }\r\n}\r\n\r\n","// 引入react\r\nimport React,{Component} from 'react'\r\n\r\n// 声明class类\r\nexport default class List extends Component {\r\n  render() {\r\n\r\n    let a1=this.props.todos.filter((item)=>{\r\n      return item.done;\r\n    });\r\n\r\n    let a2=this.props.todos.filter((item)=>{\r\n      return !item.done;\r\n    })\r\n\r\n    return(\r\n      <div>\r\n        <h2>正在进行{a2.length}</h2>\r\n        <ul>\r\n          {\r\n            this.props.renderTodos(false)\r\n          }\r\n        </ul>\r\n        <h2>已经完成{a1.length}</h2>\r\n        <ul>\r\n          {\r\n            this.props.renderTodos(true)\r\n          }\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport Input from './Input';\r\nimport List from './List';\r\n\r\n// 声明class类\r\nexport default class TodoList\r\n extends Component {\r\n     // 构造方法\r\n     constructor(){\r\n         super();\r\n         this.state={\r\n             inpValue:'',//初始化输入框\r\n             todos:[\r\n                {title:'1',done:true},\r\n                {title:'2',done:false},\r\n             ]\r\n         }\r\n     }\r\n\r\n    componentDidMount(){\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos: JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n\r\n    handleChange=(e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n\r\n    //数据添加\r\n    handleClick = ()=>{\r\n        if(this.state.inpValue ==''){\r\n            return;\r\n        }else{\r\n        this.setState({todos:[{title:this.state.inpValue,done:false},...this.state.todos]});\r\n        this.setState({inpValue:''});\r\n        }\r\n     }\r\n\r\n     //数据删除\r\n     delete = (idx)=>{\r\n         this.setState({\r\n             todos:this.state.todos.filter((item,index)=>index!=idx)\r\n         })\r\n     }\r\n\r\n     toggle = (index)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos));\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos:newTodos\r\n         })\r\n      \r\n     }\r\n\r\n     renderTodos = (done)=>{\r\n         return this.state.todos.map((todo,idx)=>{\r\n            if(todo.done==done){\r\n                return<li>\r\n                    <input type=\"checkbox\" \r\n                    checked={done} \r\n                    onClick={()=>this.toggle(idx)}\r\n                    />\r\n\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}>\r\n\r\n                    </span>\r\n\r\n                    <button onClick={()=>this.delete(idx)}>\r\n                        删除\r\n                    </button>\r\n                </li>\r\n                \r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        //ES6结构赋值\r\n        const {todos,inpValue}=this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Input inpValue={inpValue} \r\n                handleClick={this.handleClick} \r\n                handleChange={this.handleChange} \r\n                />\r\n\r\n                <List todos={todos} \r\n                renderTodos={this.renderTodos} \r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n\n// // setInterval(()=>{\n// //   let ele = <h1 id=\"title\" className=\"tit\">\n// //   <div>当前时间</div>\n// //   {new Date().toLocaleString()}\n// // </h1>;},1000\n// // );\n\n\n\n// // let ele = React.createElement(\n// //   'h1',\n// //   {id:'title'},\n// //   'hello react'\n// // )\n// //  console.log(ele);\n\n// // let ReactDOM = {\n// //   render(eleObj,container){\n// //     //解构\n// //     const{type,props} = eleObj;\n// //     //创建第一层节点\n// //     let ele = document.createElement(type);\n// //     //遍历属性对象，将属性添加到第一层节点对象上\n// //     for(const prop in props){\n// //       if(prop == 'children'){\n// //         if(typeof child == 'string'){\n// //           const txtNode = document.createTextNode(child);\n// //           ele.appendChild(textNode);\n// //           break;\n// //         }\n// //         //将第一层节点对象的子元素添加进去\n// //         props.children.forEach(child=>{\n// //           if(typeof child == 'string'){\n// //             const txtNode = document.createTextNode(child);\n// //             ele.appendChild(textNode);\n// //           }else{//递归\n// //             ReactDOM.render(child,ele);\n// //           }\n// //         })\n// //       }else{\n// //         ele[prop] = props[prop];\n// //       }\n// //     }\n// //     //将第一层dom节点添加到container中\n// //     container.appendChild(ele);\n// //   }\n// // }\n\n\n// // //函数组建\n// // function App(props){\n// //   const{title,id} = props;\n// //   return <div>\n// //     <div>hello</div>\n// //     <div>world</div>\n// //   </div>\n// // }\n// // //智能组件\n// // //class\n// // class Demo extends React.Component{\n// //   constructor(){\n// //     super();\n// //     //声明状态\n// //     this.state={\n// //       name:'Tom'\n// //     }\n// //   }\n\n// //   render(){\n// //     return<div>\n// //       <div>name:{this.state.name}</div>\n// //       <App title={this.state.name} id='app'/>\n// //       <App title='任意值' id='app'/>\n// //       <App title='任意值' id='app'/>\n// //       <App title='任意值' id='app'/>\n// //     </div>\n// //   }\n// // }\n\n// // ReactDOM.render(\n// //   <App title='abc'/>,\n// //   document.getElementById('root')\n// // );\n// import $ from 'jquery';\n// console.log($);\n// class Home extends React.Component{\n//   constructor(){\n//     super();\n//     this.state = {\n//       data:[]\n//     }\n//     // setTimeout(()=>{\n//     //   this.setState({data:[5,6,7,8,9]}) \n//     // },500)\n//     fetch('http://cnodejs.org/api/v1/topics')\n//     .then(res=>res.json())\n//     .then(data=>{\n//       this.setState({data:data.data})\n//     })\n//   }\n//   render(){\n//     return<ul>{\n//       this.state.data.map(\n//         (item)=><li>{item}</li>\n//       )\n//     }\n//     </ul>\n//   }\n// }\n// ReactDOM.render(\n//   <div />,\n//   document.getElementById('root')\n// );\n\n\n\n//alt shift + 上下键  复制一行\n//alt +上下键   移动一行\n// let List = (props) => {\n//   return <ul>\n//     {\n//       props.data.map(\n//         (item) => <li key={item.id}>{item.title}</li>\n//       )\n//     }\n//   </ul>\n// }\n\n// const Buttons = ()=>{\n//   const btns = [1,2,3,4,5];\n//   const handleClick = (num)=>{\n//     //事件对象\n//     console.log(num);\n//   }\n//   return <div>\n//     {\n//       btns.map(\n//         (item)=>(\n//         <button\n//           key={item}\n//           onClick={()=>handleClick(item)}\n//         >\n//         {item}</button>))\n//     }\n//   </div>\n// }\n\n// class Home extends React.Component {\n//   constructor(props) {\n//     super();\n//     this.state = {\n//       data: []\n//     }\n//   }\n//   componentDidMount() {\n//     fetch('https://cnodejs.org/api/v1/topics')\n//       .then(res => res.json())\n//       .then(({ data }) => {\n//         console.log(data);\n//         this.setState({ data })\n//       })\n//   }\n//   getData = (page) => {\n//     fetch('https://cnodejs.org/api/v1/topics?page=' + page)\n//       .then(res => res.json())\n//       .then(({ data }) => {\n//         console.log(data);\n//         this.setState({ data })\n//       })\n//     console.log(page);\n//   }\n//   render() {\n//     const { data } = this.state;\n//     const btns = [1, 2, 3, 4, 5];\n//     return <div>\n//       {\n//         btns.map(\n//           (item) => (\n//             <button\n//               key={item}\n//               onClick={() => this.getData(item)}\n//             >\n//               {item}\n//             </button>\n//           ))\n//       }\n//       <List data={data} />\n//     </div>\n//   }\n// }\n\n\n\n// 组件声明\n// 函数组件\n// UI（展示）组件，木偶组件\n// function App(props){\n//   const { title, id } = props;\n//   return <div>\n//     <h1>App组件内容</h1>\n//     <div>{title}</div>\n//     <div>{id}</div>\n//   </div>\n// }\n// // 智能组件\n// class Demo extends React.Component{\n//   constructor(){\n//      super();\n//     //  声明状态\n//      this.state = {\n//        name: new Date().toLocaleString()\n//      }\n//      setInterval(()=>{\n//       this.setState({name:new Date().toLocaleString()})\n//      },1000)\n//   }\n//   render(){\n//     return <div>\n//       <div>name:{this.state.name}</div>\n//       <App title={this.state.name} id='app'/>\n//     </div>\n//   }\n// }\n\n\n\n\n\n// let ele = React.createElement(\n//   'h1',\n//   {id:'title'},\n//   React.createElement('div',{},'hello'),\n//   'react'\n// )\n\n// 将jsx对象渲染到DOM中\n// let ReactDOM = {\n//   render(eleObj,container){\n//     // 解构\n//     const { type,props } = eleObj;\n//     // 创建第一层节点\n//     let ele = document.createElement(type);\n//     // 遍历属性对象，将属性添加到第一层节点对象上\n//     for (const prop in props) {\n//       console.log(prop)\n//       if(prop == 'children'){\n//         if(typeof props.children == 'string'){\n//             const txtNode = document.createTextNode(props.children);\n//             ele.appendChild(txtNode);\n//             break;\n//         }\n//         // 将第一层节点对象的子元素添加进去\n//         props.children.forEach( child => {\n//           if(typeof child == 'string'){\n//             const txtNode = document.createTextNode(child);\n//             ele.appendChild(txtNode);\n//           }else{\n//             ReactDOM.render(child,ele);\n//           }\n//         })\n//       }else{\n//         ele[prop] = props[prop];\n//       }\n//     }\n\n//     // 将第一层DOM节点添加到container中\n//     container.appendChild(ele);\n//   }\n// }\n\n\n\n\n\n  // 1、原生JS，DOM操作（jQ）\n  // 2、React：开发效率高、性能高\n  // 3、环境搭建、创建一个项目、运行\n  // 4、JSX语法\n  \n  import React from 'react';\n  import ReactDOM from 'react-dom';\n  import TodoList from './components/TodoList';\n  //TodoList组件,大写字母开头一般为组件(导入)\n  \n  //渲染一个DOM节点\n  ReactDOM.render(\n    <TodoList />,\n    document.getElementById('root')\n  );\n  \n  "],"sourceRoot":""}